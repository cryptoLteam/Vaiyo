let currentAccount = "";
let currentWallet = "metamask";
function post(path, params, method = "post") {
  // The rest of this code assumes you are not using a library.
  // It can be made less verbose if you use one.
  const form = document.createElement("form");
  form.method = method;
  form.action = path;

  for (const key in params) {
    if (params.hasOwnProperty(key)) {
      const hiddenField = document.createElement("input");
      hiddenField.type = "hidden";
      hiddenField.name = key;
      hiddenField.value = params[key];

      form.appendChild(hiddenField);
    }
  }

  document.body.appendChild(form);
  form.submit();
}

function togleOtherWallet() {
  const otherbtn = document.getElementById("otherwallet");
  if (otherbtn.innerHTML == "keyboard_arrow_right")
    otherbtn.innerHTML = "keyboard_arrow_down";
  else otherbtn.innerHTML = "keyboard_arrow_right";
}

async function signinWithWallet() {
  connectWithWallet(currentWallet, "signin");
}

async function setWallet(wallettype) {
  currentWallet = wallettype;
  switch (wallettype) {
    case "metamask":
      document.getElementById("certain-image").src = "<%= asset_path('metamask-alternative.png')%>";
      break;
    case "binance":
      document.getElementById("certain-image").src = "<%= asset_path('binance.png')%>";
      break;
    case "mathwallet":
      document.getElementById("certain-image").src = "<%= asset_path('mathwallet.png')%>";
      break;
    default:
    // code block
  }
}
async function connectWithWallet(wallettype, where) {
  switch (wallettype) {
    case "metamask":
      await connectMetamask();
      break;
    case "binance":
      if(_test_ == false) {
        if(window.BinanceChain.chainId != 0x38) {
          await BinanceChain.switchNetwork("bsc-mainnet");
        }   
      } else {
        if(window.BinanceChain.chainId != 0x61) {
          await BinanceChain.switchNetwork("bsc-testnet");
        }   
      }
      await connectBinance();
      break;
    case "mathwallet":
      await connectMathwallet();
      break;
    default:
    // code block
  }

  if(currentAccount != "") {
    if (where == "signin") {
      post("/u/login/", { waddress: currentAccount, wtype: wallettype });
    }
    if (where == "signup") {
      document.getElementById("txtwaddress").value = currentAccount;
      document.getElementById("wtype").value = wallettype;
    }
    if (where == "profile") {
      document.getElementById("txtwaddress1").value = currentAccount;
      document.getElementById("wtype1").value = wallettype;
    }
    if (where == "old") {
      document.getElementById("txtwaddress2").value = currentAccount;
      document.getElementById("wtype2").value = wallettype;
    }
  }
}
function handleAccountsChanged(accounts) {
  if (accounts.length === 0) {
    // Binance Chain Wallet is locked or the user has not connected any accounts
    console.log("Please connect to Binance Chain Wallet.");
  } else if (accounts[0] !== currentAccount) {
    currentAccount = accounts[0];
    // Do any other work!
  }
}

async function connectMetamask() {
  if (typeof window.ethereum !== "undefined") {
    const accounts = await ethereum.request({ method: "eth_requestAccounts" });
    handleAccountsChanged(accounts);
  }
}

// BinanceChain.on("chainChanged", handleChainChanged);

// function handleChainChanged(_chainId) {
//   // We recommend reloading the page, unless you must do otherwise
//   window.location.reload();
// }

async function connectBinance() {
  if (typeof window.BinanceChain !== "undefined") {
    try{
      const accounts = await BinanceChain.request({
        method: "eth_requestAccounts",
      });
      handleAccountsChanged(accounts);
    } catch (e) {
      console.log(e);
    }
  }
}

async function connectMathwallet() {
  if (typeof window.bitcoin !== "undefined") {
    var payload = await bitcoin.getAccount();
    var account = payload["address"];
  } else if (window.ethereum.isMathWallet) {
    var account = ethereum.selectedAddress;
  } else if (typeof window.solana !== "undefined") {
    // var account = solana.getAccount();
  } else if (typeof window.injectedWeb3.mathwallet !== "undefined") {
    // var account =
  }

  if (account) currentAccount = account;
}

async function changeNetwork(_wtype) {
  if (_wtype == "binance") {
    if (typeof window.BinanceChain !== "undefined") {
      if (_test_ == false) {
        if (window.BinanceChain.chainId != 0x38) {
          await BinanceChain.switchNetwork("bsc-mainnet")
            .then((e) => {
            })
            .catch((e) => {
              console.log(e);
            });
        }
      } else {
        if (window.BinanceChain.chainId != 0x61) {
          await BinanceChain.switchNetwork("bsc-testnet")
            .then((e) => {
            })
            .catch((e) => {
              console.log(e);
            });
        }
      }
    }
  } /*if (_wtype == "metamask")*/ else {
    if (typeof window.ethereum !== "undefined") {
      if (_test_ == false) {
        if (window.ethereum.chainId != 0x38) {
          await window.ethereum
            .request({
              method: "wallet_switchEthereumChain",
              params: [{ chainId: "0x38" }],
            })
            .then((e) => {
            })
            .catch((e) => {
              console.log(e);
            });
        }
      } else {
        if (window.ethereum.chainId != 0x61) {
          await window.ethereum
            .request({
              method: "wallet_switchEthereumChain",
              params: [{ chainId: "0x61" }],
            })
            .then((e) => {
            })
            .catch((e) => {
              console.log(e);
            });
        }
      }
    }
  }
}